11/24
* 연관관계 매핑은 테이블(== entity) 에다가


[게시글 댓글 달기]

게시판

1 : 다 관계 매핑
-> 게시글(1)
	-> 댓글(n)

one to many
one인 경우 확인이 불가하다
항상 many인 곳이 확인 가능

(ex) many to one 이면 many 가 확인
1인 경우에서는 확인 불가
다인 경우에서만 확인 가능

1  :  다
다 :  1 

당연히 리스트로는 길게 들고 있지만
게시글이 댓글의 pk(fk)를 갖는게 아니라
댓글들이 게시글 하나의 pk(fk)를 가지는 것
(게시글에 댓글이 수천 수만일 수 ㅣㅇㅆ는데 댓글들의 pk(fk)하나하나를 가지고 있을 순 없으므로)

댓글이 board를 확인 할 수 있으면 됨

댓글을 들고는 있지만 들고 있는게 끝.

((주인) - (핸드폰)
내가 핸드폰을 가지고 다닌다 XX 현실과 반대 개념)

이해X
!SQL의 규칙!
부모 - 자식 관계도면
자식이 부모를 확인, 따라다님.
ex) 핸드폰이 나를 따라다니는..

//  1   :   다
    // 소유    비소유
    // 소유 했지만 확인은 안됨(1)
    // 소유를 했어도 sql 확인이 안되는?

    // mappedBy = "board": comment 클래스 에 있는 변수 명(board)을 적어 주면 됨

    // cascade = CascadeType.REMOVE: 게시물이 삭제되면 댓글을 자동으로 지워 줌
    // 소유한 쪽에서 데이터를 지웠을 때 더이상 이 데이터를 갖고 있지 않은 상태
    // 게시물이 지워졌는데 댓글이 있을 필요 없잖아? 자동으로 지워 주는 설정

    // orphanRemoval = true: 연결관계가 끊어지면 자동 삭제(해라)
    
    // fetch = FetchType.LAZY: 지연로딩(성능 최적화)
    // 항상 있을 필요는 없고 자식 테이블이 있는 경우 지연로딩을 한번 해줌 으로써 (트랜잭션...이 원래 매우 빠르게 일어나는 데..)
    // bean = 객체
    @OneToMany(mappedBy = "board", cascade = CascadeType.REMOVE, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Comment> comment = new ArrayList<>();


@JoinColumn(name = "board_id")에서 name = "board_id"는 데이터베이스 테이블의 외래 키 컬럼 이름을 지정하는 것
이 이름은 데이터베이스 스키마에 따라 달라질 수 있음.
(MySQL에서 뜨는 컬럼 이름)
---
html 1,2,3 (프론트)

---




