11/22

빌더 만들지 않으면
받아온 값을 엔티티로 저장해서 set 엔티티 해줘야하기 때뭉네 번거로움
-> 따라서 빌더를 만들어준다.

쓸거면
@Setter or @Builder	

--
매번
Board board = new Board();
board.setTitle();
쭉 셋으로 쓰는 것보다

* toEntity() 사용시
Board entity = board.toEntity();
이렇게 하면 되니까 매번 만드는 것보다 편하죠.


--


데이터 불러와서 find name
수정 삭제

--


[페이징]
뜨는 내용물에 대한 전환

파일 업로드 = 게시판 이번주 끝남
이쁘게 만드는 건 개인이 알아서

--
id 필요 없으면 DTO에 안쓰는 데 

페이징 처리를 할땐 id 값이 필요함(pk)
정렬할 값 (페이지 1 2 3 4 5)

들고올 땐 엔티티로 들고 오더라도 출력은 디티오로 할거니까.


최초 저장할 땐
최초 작성일은 변하지X

pk값이 없으면 게시물들을 구분할 수 없기 때문에 필요


내가 외부에 출력시키려면 - DTO에  (ex)작성일이 포함되어 있어야 함


DTO에는 createtime

눈엔 안보이지만
DTO에 만들어지지 않은건 외부에 출력할 수 없음

엔티티에 저장해놓은건 dB(테이블)에 저장하기위한 용도

DTO는 데이터를 주고 받는데 이용하기 위한것 (뷰에 출력)

--

// paging 이 진행 되는 함수
    // paging 을 표현할 리스트
    // Pageable: 리스트의 수량 정보를 포함 해놓은 클래스,인터페이스
    public Page<BoardDto> paging(Pageable pageable){
        // 정형화 된 코드
        // 이렇게 하면 페이지가 1부터 시작함
        // 0부터 시작하려면 -1 지우면 됨

        // 페이지 시작 번호 세팅
        int page = pageable.getPageNumber() -1 ;

        // 페이지에 포함 될 게시물 개수
        int size = 5;

        // 전체 게시물 불러옴
        Page<Board> boards = boardRepository.findAll(
                // 정렬 처리 해서 가져 옴(자동)
                PageRequest.of(page, size));

        // 람다식
        // 위의 전체게시불 boards를 가져와서
        // 처음 내부에는 리스트 형태로 쫙 펼쳐진 상태
        //                for문 생각 해서
        //                하나하나 가리킴 (i를 다 가리키는 것 처럼)
        return boards.map(board -> new BoardDto(
                board.getId(),
                board.getUsername(),
                board.getTitle(),
                board.getContents(),
                board.getCreateTime(),
                board.getUpdateTime()
        ));
        // 단순히 쓰는 것만 편한거지 for문 열번 도는거 = 람다도 10번 도는 것과 같음
        // 그걸 Dto 형태로 반환 하겠다.
    }

// model <-> html
    @GetMapping("/paging")
    public String paging(@PageableDefault(page = 1) Pageable pageable, Model model){
        Page<BoardDto> boards = boardService.paging(pageable);

        int blockLimit = 3; // 페이지 1~3까지 보임

        // 고정값이 되면 안되니까 123/ 456 부터 시작해야 하니까 + 1이 들어감
        int startPage = (int)Math.ceil((double)pageable.getPageNumber() / blockLimit - 1) * blockLimit + 1;

        // 1이라고 하면 4까지 나와야한까
        // 삼항 연산자 - < - ? T : F
        int endPage = (startPage+ blockLimit - 1) < boards.getTotalPages() ? (startPage + blockLimit -1) : boards.getTotalPages();
        
        // 이름이 잘 만들어져 있어야함 이름이 틀리면 곤란쓰
        // A라고 명명했으면 A라고 들어가야 함
        model.addAttribute("BoardList", boards);

        //model.addAttribute("B");
        //model.addAttribute("C");

        return "paging";
    }




herf: @ 링크를 연결
뭔 문자를 쓰면 링크연결 시켜주는 애
ㅏ우리ㅡㄴㄴ 거기다가 문자를 얘로 연결시키겠다


